{
  "name": "ember-validations",
  "version": "0.0.1",
  "directories": {
    "doc": "doc",
    "test": "tests"
  },
  "scripts": {
    "start": "ember server",
    "build": "ember build",
    "test": "ember test"
  },
  "description": "Validations",
  "repository": {
    "type": "git",
    "url": "https://github.com/ewalti/ember-validations"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "author": "",
  "license": "MIT",
  "devDependencies": {
    "broccoli-asset-rev": "^1.0.0",
    "broccoli-ember-hbs-template-compiler": "^1.6.1",
    "ember-cli": "0.1.4",
    "ember-cli-content-security-policy": "0.3.0",
    "ember-cli-dependency-checker": "0.0.6",
    "ember-cli-esnext": "0.1.1",
    "ember-cli-ic-ajax": "0.1.1",
    "ember-cli-inject-live-reload": "^1.3.0",
    "ember-cli-qunit": "0.1.2",
    "ember-data": "1.0.0-beta.12",
    "ember-export-application-global": "^1.0.0",
    "express": "^4.8.5",
    "glob": "^4.0.5"
  },
  "keywords": [
    "ember-addon"
  ],
  "ember-addon": {
    "configPath": "tests/dummy/config"
  },
  "readme": "# Ember Validations #\n\n[![Build Status](https://secure.travis-ci.org/dockyard/ember-validations.svg?branch=master)](http://travis-ci.org/dockyard/ember-validations)\n\n## Building yourself ##\n\n```bash\nnpm install\nbower install\nember build\n```\n\nThe builds will be in the `dist/` directory.\n\n## Installing ##\n\n#### With Ember-CLI ####\n\nIf you are using\n[`ember-cli`](https://github.com/stefanpenner/ember-cli) you can add\n`ember-validations` to your `package.json`:\n\n```javascript\n\"devDependencies\": {\n  ...\n  \"ember-validations\": \"~ 2.0.0\"\n}\n```\n\nYou may want to be more precise with your version locking.\n\n#### Without Ember-CLI ####\n\nWe will continue to build `EmberValidations` to the DockYard build\nserver until `ember-cli` is officially recommended by Ember. You can\nselect a build version from:\n[http://builds.dockyard.com](http://builds.dockyard.com) for use in\nBower.\n\n## Looking for help? ##\n\nIf it is a bug [please open an issue on GitHub](https://github.com/dockyard/ember-validations/issues).\n\n## Usage ##\n\nYou need to mixin `EmberValidations.Mixin` into any `Ember.Object` you want to add\nvalidations to:\n\n```javascript\nimport Ember from 'ember';\nimport EmberValidations from 'ember-validations';\n\nexport default Ember.ObjectController.extend(EmberValidations.Mixin);\n```\n\nYou define your validations as a JSON object. They should be added to\nthe controller that represents the model in question.\nThe keys in the object should map to properties. If you pass a\nJSON object as the value this will be seen as validation rules to apply\nto the property. If you pass `true` then the property itself will be\nseen as a validatable object.\n\n```javascript\nexport default Ember.ObjectController.extend({\n  validations: {\n    firstName: {\n      presence: true,\n      length: { minimum: 5 }\n    },\n    age: {\n      numericality: true\n    },\n    profile: true\n  }\n});\n```\n\nThough not yet explicitly part of the API, you can also add validators\nto nested objects:\n\n```javascript\nexport default Ember.Component.extend({\n  validations: {\n    'user.firstName': {\n      presence: true,\n      length: { minimum: 5 }\n    }\n  }\n});\n```\n\nThis is useful for things like Components which don't act as proxies, but\nagain, until this is officially built into the project, YMMV.\n\n\n## Validators ##\n\n### Absence ###\nValidates the property has a value that is `null`, `undefined`, or `''`\n\n#### Options ####\n  * `true` - Passing just `true` will activate validation and use default message\n  * `message` - Any string you wish to be the error message. Overrides `i18n`.\n\n```javascript\n// Examples\nabsence: true\nabsence: { message: 'must be blank' }\n```\n\n### Acceptance ###\nBy default the values `'1'`, `1`, and `true` are the acceptable values\n\n#### Options ####\n  * `true` - Passing just `true` will activate validation and use default message\n  * `message` - Any string you wish to be the error message. Overrides `i18n`.\n  * `accept` - the value for acceptance\n\n```javascript\n// Examples\nacceptance: true\nacceptance: { message: 'you must accept', accept: 'yes' }\n```\n\n### Confirmation ###\nExpects a `propertyConfirmation` to have the same value as\n`property`\n\n#### Options ####\n  * `true` - Passing just `true` will activate validation and use default message\n  * `message` - Any string you wish to be the error message. Overrides `i18n`.\n\n```javascript\n// Examples\nconfirmation: true\nconfirmation: { message: 'you must confirm' }\n```\n\n### Exclusion ###\nA list of values that are not allowed\n\n#### Options ####\n  * `message` - Any string you wish to be the error message. Overrides `i18n`.\n  * `allowBlank` - If `true` skips validation if value is empty\n  * `in` - An array of values that are excluded\n  * `range` - an array with the first element as the lower bound the and second element as the upper bound. Any value that falls within the range will be considered excluded\n\n```javascript\n// Examples\nexclusion: { in: ['Yellow', 'Black', 'Red'] }\nexclusion: { range: [5, 10], allowBlank: true, message: 'cannot be between 5 and 10' }\n```\n\n### Format ###\nA regular expression to test with the value\n\n#### Options ####\n  * `message` - Any string you wish to be the error message. Overrides `i18n`.\n  * `allowBlank` - If `true` skips validation if value is empty\n  * `with` - The regular expression to test with\n\n```javascript\n// Examples\nformat: { with: /^([a-zA-Z]|\\d)+$/, allowBlank: true, message: 'must be letters and numbers only'  }\n```\n\n### Inclusion ###\nA list of the only values allowed\n\n#### Options ####\n  * `message` - Any string you wish to be the error message. Overrides `i18n`.\n  * `allowBlank` - If `true` skips validation if value is empty\n  * `in` - An array of values that are allowed\n  * `range` - an array with the first element as the lower bound the and\nsecond element as the upper bound. Only values that fall within the range will be considered allowed\n\n```javascript\n// Examples\ninclusion: { in: ['Yellow', 'Black', 'Red'] }\ninclusion: { range: [5, 10], allowBlank: true, message: 'must be between 5 and 10' }\n```\n\n### Length ###\nDefine the lengths that are allowed\n\n#### Options ####\n  * `number` - Alias for `is`\n  * `array` - Will expand to `minimum` and `maximum`. First element is the lower bound, second element is the upper bound.\n  * `allowBlank` - If `true` skips validation if value is empty\n  * `minimum` - The minimum length of the value allowed\n  * `maximum` - The maximum length of the value allowed\n  * `is` - The exact length of the value allowed\n  * `tokenizer` - A function that should return a object that responds to `length`\n\n##### Messages #####\n  * `tooShort` - the message used when the `minimum` validation fails. Overrides `i18n`\n  * `tooLong` - the message used when the `maximum` validation fails. Overrides `i18n`\n  * `wrongLength` - the message used when the `is` validation fails. Overrides `i18n`\n\n```javascript\n// Examples\nlength: 5\nlength: [3, 5]\nlength: { is: 10, allowBlank: true }\nlength: { minimum: 3, maximum: 5, messages: { tooShort: 'should be more than 3 characters', tooLong: 'should be less than 5 characters' } }\nlength: { is: 5, tokenizer: function(value) { return value.split(''); } }\n```\n\n### Numericality ###\nWill ensure the value is a number\n\n#### Options ####\n  * `true` - Passing just `true` will activate validation and use default message\n  * `allowBlank` - If `true` skips validation if value is empty\n  * `onlyInteger` - Will only allow integers\n  * `greaterThan` - Ensures the value is greater than\n  * `greaterThanOrEqualTo` - Ensures the value is greater than or equal to\n  * `equalTo` - Ensures the value is equal to\n  * `lessThan` - Ensures the value is less than\n  * `lessThanOrEqualTo` - Ensures the value is less than or equal to\n  * `odd` - Ensures the value is odd\n  * `even` - Ensures the value is even\n\n##### Messages #####\n  * `greaterThan` - Message used when value failes to be greater than. Overrides `i18n`\n  * `greaterThanOrEqualTo` - Message used when value failes to be greater than or equal to. Overrides `i18n`\n  * `equalTo` - Message used when value failes to be equal to. Overrides `i18n`\n  * `lessThan` - Message used when value failes to be less than. Overrides `i18n`\n  * `lessThanOrEqualTo` - Message used when value failes to be less than or equal to. Overrides `i18n`\n  * `odd` - Message used when value failes to be odd. Overrides `i18n`\n  * `even` - Message used when value failes to be even. Overrides `i18n`\n\n```javascript\n// Examples\nnumericality: true\nnumericality: { odd: true, messages: { odd: 'must be an odd number' } }\nnumericality: { onlyInteger: true, greaterThan: 5, lessThanOrEqualTo : 10 }\n```\n\n### Presence ###\nValidates the property has a value that is not `null`, `undefined`, or `''`\n\n#### Options ####\n  * `true` - Passing just `true` will activate validation and use default message\n  * `message` - Any string you wish to be the error message. Overrides `i18n`.\n\n```javascript\n// Examples\npresence: true\npresence: { message: 'must not be blank' }\n```\n\n### Uniqueness ###\n\n*Not yet implemented.*\n\n### Conditional Validators ##\n\nEach validator can take an `if` or an `unless` in its `options` hash.\nThe value of the conditional can be an inline function, a string that\nrepresents a property on the object, or a string that represents a\nfunction on the object. The result should be a boolean.\n\n**note that `if` is considered a keyword in IE8 and so you should put it\nin quotes**\n\n```javascript\n// function form\nfirstName: {\n  presence: {\n    'if': function(object, validator) {\n      return true;\n    }\n  }\n}\n\n// string form\n// if 'canValidate' is a function on the object it will be called\n// if 'canValidate' is a property object.get('canValidate') will be called\nfirstName: {\n  presence: {\n    unless: 'canValidate'\n  }\n}\n```\n\n### Custom Validators ###\n\n### With Ember-CLI ###\n\nYou can place your custom validators into\n`my-app/app/validators/{local,remote}/<name>`:\n\n```javascript\nimport Base from 'ember-validations/validators/base';\n\nexport default Base.extend({\n   ...\n});\n```\n\nIt is recommended that you separate between `local` and `remote`\nvalidators. However, if you wish you can place your validator into\n`my-app/app/validators/<name>`. However, any similarly named validator\nin `local/` or `remote/` has a higher lookup presedence over those in\n`validators/`.\n\nThe \"native\" validators that come with `ember-validations` have the\nlowest lookup priority.\n\n### Without Ember-CLI ###\n\nYou can add your validators to the global object:\n\n```javascript\nEmberValidations.validators.local.<ClassName> =\nEmberValidations.validators.Base.extend({\n ...\n});\n```\n\n### Creating ###\n\nTo create a new validator you need to override the `call` function. When\nthe validator is run its `call` function is what handles determining if\nthe validator is valid or not. Call has access to `this.model`,\n`this.property`. If the validation fails you **must** push the failing\nmessage onto the validator's `this.errors` array. A simple example of a\nvalidator could be:\n\n```javascript\nimport Base from 'ember-validations/validators/base';\n\nexport default Base.extend({\n  call: function() {\n    if (Ember.isBlank(this.model.get(this.property))) {\n      this.errors.pushObject(\"cannot be blank\");\n    }\n  }\n});\n```\n\nYou may want to create a more complex validator that can observer for\nchanges on multiple properties. You should override the `init` function\nto accomplish this:\n\n```javascript\nimport Base from 'ember-validations/validators/base';\n\nexport default Base.extend({\n  init: function() {\n    // this call is necessary, don't forget it!\n    this._super();\n\n    this.dependentValidationKeys.pushObject(this.options.alsoWatch);\n  },\n  call: function() {\n    if (Ember.isBlank(this.model.get(this.property))) {\n      this.errors.pushObject(\"cannot be blank\");\n    }\n  }\n});\n```\n\nThe `init` function is given access to the `this.options` wich is simply\na POJO of the options passed to the validator.\n`dependentValidationKeys` is the collection of paths relative to\n`this.model` that will be observed for changes. If any changes occur on\nany given path the validator will automatically trigger.\n\n#### Inline Validators ####\n\nIf you want to create validators inline you can use the\n`EmberValidations.validator` function:\n\n```javascript\nUser.create({\n  validations: {\n    name: {\n      inline: EmberValidations.validator(function() {\n        if (this.model.get('canNotDoSomething')) {\n          return \"you can't do this!\"\n        }\n      }) \n    }\n  }\n});\n```\n\nInside the `validator` function you have access to `this.model` which is\na reference to the model. You **must** return an error message that will\nbe attached to the errors array for the property it is created on.\nReturn nothing for the validator to pass.\n\nAlternatively if the property doesn't have any additional validations\nyou can use a more concise syntax:\n\n```javascript\nUser.create({\n  validations: {\n    name: EmberValidations.validator(function() {\n      if (this.model.get('canNotDoSomething')) {\n        return \"you can't do this!\"\n      }\n    }) \n  }\n});\n```\n\n## Running Validations\n\nValidations will automatically run when the object is created and when\neach property changes. `isValid` states bubble up and help define the\ndirect parent's validation state. `isInvalid` is also available for convenience.\n\nIf you want to force all validations to run simply call `.validate()` on the object. `isValid` will be set to `true`\nor `false`. All validations are run as deferred objects, so the validations will\nnot be completed when `validate` is done. So `validate` returns a promise, call `then`\nwith a function containing the code you want to run after the validations have successfully\ncompleted.\n\n```javascript\nuser.validate().then(function() {\n  // all validations pass\n  user.get('isValid'); // true\n}).catch(function() {\n  // any validations fail\n  user.get('isValid'); // false\n}).finally(function() {\n  // all validations complete\n  // regardless of isValid state\n user.get('isValid'); // true || false \n});\n```\n\n## Inspecting Errors ##\n\nAfter mixing in `EmberValidations.Mixin` into your object it will now have a\n`.errors` object. All validation error messages will be placed in there\nfor the corresponding property. Errors messages will always be an array.\n\n```javascript\nimport Ember from 'ember';\nimport EmberValidations from 'ember-validations';\n\nexport default Ember.Object.extend(EmberValidations.Mixin, {\n  validations: {\n    firstName: { presence: true }\n  }\n});\n```\n\n```javascript\nimport User from 'my-app/models/user';\n\nuser = User.create();\nuser.validate().then(null, function() {\n  user.get('isValid'); // false\n  user.get('errors.firstName'); // [\"can't be blank\"]\n  user.set('firstName', 'Brian');\n  user.validate().then(function() {\n    user.get('isValid'); // true\n    user.get('errors.firstName'); // []\n  })\n})\n\n```\n\n## Testing ##\n\n#### With Ember QUnit ####\n\nFor Ember Validations to work with [Ember QUnit](https://github.com/rwjblue/ember-qunit),\nyou must define all your validations in the `needs` property of the `moduleFor`\ncall. This will ensure Ember QUnit's isolated container will be able to locate\nthe validations during testing.\n\n```javascript\nimport { test, moduleFor } from 'ember-qunit';\n\nmoduleFor('controller:user/edit', 'UserEditController', {\n  needs: ['ember-validations@validator:local/presence',\n          'ember-validations@validator:local/length',\n          'validator:local/name',\n          'validator:local/email'\n          ]\n});\n\ntest('Controller Test', function() { ... });\n```\n\nWhere `UserEditController` uses the built-in `presence` and `length` validators,\nand the locally defined `name` and `email` validators.\n\n## i18n ##\n\nWhen you use [ember-i18n](https://github.com/jamesarosen/ember-i18n) your `Ember.I18n.translations` object should contain the following keys under the `errors` key:\n\n```javascript\nEmber.I18n.translations = {\n  errors:\n    inclusion: \"is not included in the list\",\n    exclusion: \"is reserved\",\n    invalid: \"is invalid\",\n    confirmation: \"doesn't match {{attribute}}\",\n    accepted: \"must be accepted\",\n    empty: \"can't be empty\",\n    blank: \"can't be blank\",\n    present: \"must be blank\",\n    tooLong: \"is too long (maximum is {{count}} characters)\",\n    tooShort: \"is too short (minimum is {{count}} characters)\",\n    wrongLength: \"is the wrong length (should be {{count}} characters)\",\n    notANumber: \"is not a number\",\n    notAnInteger: \"must be an integer\",\n    greaterThan: \"must be greater than {{count}}\",\n    greaterThanOrEqualTo: \"must be greater than or equal to {{count}}\",\n    equalTo: \"must be equal to {{count}}\",\n    lessThan: \"must be less than {{count}}\",\n    lessThanOrEqualTo: \"must be less than or equal to {{count}}\",\n    otherThan: \"must be other than {{count}}\",\n    odd: \"must be odd\",\n    even: \"must be even\"\n}\n````\n\n## Authors ##\n\n* [Brian Cardarella](http://twitter.com/bcardarella)\n\n[We are very thankful for the many contributors](https://github.com/dockyard/ember-validations/graphs/contributors)\n\n## Versioning ##\n\nThis library follows [Semantic Versioning](http://semver.org)\n\n## Want to help? ##\n\nPlease do! We are always looking to improve this gem. Please see our\n[Contribution Guidelines](https://github.com/dockyard/ember-validations/blob/master/CONTRIBUTING.md)\non how to properly submit issues and pull requests.\n\n## Legal ##\n\n[DockYard](http://dockyard.com), LLC &copy; 2013\n\n[@dockyard](http://twitter.com/dockyard)\n\n[Licensed under the MIT license](http://www.opensource.org/licenses/mit-license.php)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ewalti/ember-validations/issues"
  },
  "homepage": "https://github.com/ewalti/ember-validations",
  "_id": "ember-validations@0.0.1",
  "_shasum": "bb523108814ebf9893895bc0d650498959f14a57",
  "_resolved": "git://github.com/ewalti/ember-validations#f2ef8a13b10462f6fd1e1ffb4e7ba83dc4a53e84",
  "_from": "ember-validations@git://github.com/ewalti/ember-validations"
}
